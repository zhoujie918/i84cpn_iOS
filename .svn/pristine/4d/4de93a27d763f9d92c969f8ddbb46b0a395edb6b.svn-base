//
//  CPRealTimeCarTabbarView.swift
//  i84cpn
//
//  Created by 爱巴士-余夏伟 on 16/6/1.
//  Copyright © 2016年 5i84. All rights reserved.
//

import UIKit

protocol CPRealTimeCarTabbarViewProtocol : NSObjectProtocol {
    func tabbarViewDidSelectRowAtIndexPath(index : Int)
}

class CPRealTimeCarTabbarView: UIView {
    
    private var tabbarView = UIView()
    private var myTableView = UITableView()
    private var lblLineName = UILabel()
    private var lblCarNo = UILabel()
    private var button = UIButton()
    
    private var isAnimating = false
    private var isShowMenu = false
    private var selectedIndex = Int()
    
    weak var delegate : CPRealTimeCarTabbarViewProtocol?
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        
        self.creatTabbarView()
        self.creatTableView()
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    
    //MARK: 创建路线栏视图
    func creatTabbarView() {
        tabbarView.backgroundColor = UIColor.whiteColor()
        tabbarView.layer.borderWidth = 1
        tabbarView.layer.borderColor = Constants.paleBGColor.CGColor
        addSubview(tabbarView)
        
        lblLineName.font = UIFont.systemFontOfSize(14)
        lblLineName.adjustsFontSizeToFitWidth = true
        tabbarView.addSubview(lblLineName)
        
        lblCarNo.font = UIFont.systemFontOfSize(14)
        lblCarNo.adjustsFontSizeToFitWidth = true
        lblCarNo.textColor = Constants.paleWordColor
        tabbarView.addSubview(lblCarNo)

        button.frame = CGRectMake(0, 0, 80, 30)
        button.setTitleColor(Constants.yellowWordColor, forState: UIControlState.Normal)
        button.titleLabel?.font = UIFont.systemFontOfSize(14)
        button.set(image: UIImage(named: "icon_down"), title: "切换线路", titlePosition:.Left,additionalSpacing: 0, state: .Normal)
        button.addTarget(self, action: #selector(buttonClick), forControlEvents: UIControlEvents.TouchUpInside)
        tabbarView.addSubview(button)
        
        weak var weakSelf = self
        tabbarView.snp_makeConstraints { (make) in
            make.left.right.bottom.equalTo(weakSelf!)
            make.bottom.equalTo(weakSelf!)
            make.height.equalTo(50)
        }
        
        lblLineName.snp_makeConstraints(closure: { (make) in
            make.left.equalTo(tabbarView).offset(10)
            make.width.lessThanOrEqualTo(SCREEN_WIDTH * 0.45)
            make.centerY.equalTo(tabbarView)
        })
        
        lblCarNo.snp_makeConstraints(closure: { (make) in
            make.left.equalTo(lblLineName.snp_right).offset(HEIGHT_DYNAMIC(15))
            make.centerY.equalTo(lblLineName)
        })
        
        button.snp_makeConstraints { (make) in
            make.right.equalTo(tabbarView.snp_right)
            make.centerY.equalTo(tabbarView)
            make.size.equalTo(CGSizeMake(80, 30))
        }
    }
    
    
    //MARK: 创建路线选择菜单
    func creatTableView() {
        myTableView.backgroundColor = Constants.paleBGColor
        myTableView.delegate = self
        myTableView.dataSource = self
        addSubview(myTableView)
        
        myTableView.snp_makeConstraints(closure: { (make) in
            make.top.equalTo(tabbarView.snp_bottom)
            make.left.right.equalTo(tabbarView)
            make.height.equalTo(0)
        })
    }
    
    //MARK: 模型的set方法
    var viewData : NSArray? {
        didSet {
            if ((viewData?.count) != 0){
                lblLineName.text = viewData![0]["lineName"] as? String
                lblCarNo.text = viewData![0]["plate_no"] as? String
                myTableView.reloadData()
            }
        }
    }
    
    //MARLK: 切换路线点击方法
    func buttonClick () {
        if isAnimating == false{
            isShowMenu = !isShowMenu
            isShowMenu==true ? self.showMenu() : self.hideMenu()
        }
    }
    
    func showMenu() {
        weak var weakSelf = self
        isAnimating = true
        UIView.animateWithDuration(0.5, delay: 0, usingSpringWithDamping: 0.5, initialSpringVelocity: 2, options: UIViewAnimationOptions.AllowUserInteraction, animations: {
            var count : Int
            if weakSelf?.viewData?.count == nil{
                count = 0
            }else{
                count = (weakSelf?.viewData?.count)!
            }
            weakSelf!.tabbarView.snp_updateConstraints(closure: { (make) in
                if count > 3{
                    make.bottom.equalTo(weakSelf!).offset(-120)
                }else{
                    make.bottom.equalTo(weakSelf!).offset(-(40 * count))
                }
                
            })
            weakSelf!.myTableView.snp_updateConstraints(closure: { (make) in
                if count > 3{
                    make.height.equalTo(120)
                }else{
                    make.height.equalTo(40 * count)
                }
            })
            weakSelf!.layoutIfNeeded()
            }) { (finished) in
                weakSelf?.isAnimating = false
        }
    }
    
    func hideMenu() {
        weak var weakSelf = self
        
        isAnimating = true
        UIView.animateWithDuration(0.5, delay: 0, usingSpringWithDamping: 0.5, initialSpringVelocity: 2, options: UIViewAnimationOptions.AllowUserInteraction, animations: {
            weakSelf!.tabbarView.snp_updateConstraints(closure: { (make) in
                make.bottom.equalTo(weakSelf!.snp_bottom)
            })
            weakSelf!.myTableView.snp_updateConstraints(closure: { (make) in
                make.height.equalTo(0)
            })
            weakSelf!.layoutIfNeeded()
        }) { (finished) in
            weakSelf?.isAnimating = false
        }
    }
    
    //响应链调整
    override func hitTest(point: CGPoint, withEvent event: UIEvent?) -> UIView? {
        var result = super.hitTest(point,withEvent:event)
        if result != nil{
            return result;
        }
        
        for subview in self.subviews{
            let subPoint = subview .convertPoint(point, fromView: self)
            result = subview.hitTest(subPoint, withEvent: event)
            if result != nil{
                return result;
            }
        }
        return nil;
    }
}


//MARK: UITableViewDelegate, UITableViewDataSource
extension CPRealTimeCarTabbarView : UITableViewDelegate, UITableViewDataSource{
    
    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return viewData?.count ?? 0
    }
    
    func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -> CGFloat {
        return 40
    }
    
    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
        var cell = tableView.dequeueReusableCellWithIdentifier("cell")
        
        if cell != true {
            cell = UITableViewCell.init(style: UITableViewCellStyle.Default, reuseIdentifier: "cell")
        }
        cell!.textLabel?.text = viewData![indexPath.row]["lineName"] as? String
        cell!.textLabel?.textAlignment = NSTextAlignment.Center
        
        return cell!
    }
    
    func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
        lblLineName.text = viewData![indexPath.row]["lineName"] as? String
        lblCarNo.text = viewData![indexPath.row]["plate_no"] as? String
        self.buttonClick()
        if indexPath.row != selectedIndex{
            self.delegate?.tabbarViewDidSelectRowAtIndexPath(indexPath.row)
        }
        selectedIndex = indexPath.row
    }
}



//MARK: 拓展button的图文设置方法
extension UIButton {
    
    @objc func set(image anImage: UIImage?, title: String,
                         titlePosition: UIViewContentMode, additionalSpacing: CGFloat, state: UIControlState){
        self.imageView?.contentMode = .Center
        self.setImage(anImage, forState: state)
        
        positionLabelRespectToImage(title, position: titlePosition, spacing: additionalSpacing)
        
        self.titleLabel?.contentMode = .Center
        self.setTitle(title, forState: state)
    }
    
    private func positionLabelRespectToImage(title: String, position: UIViewContentMode,
                                             spacing: CGFloat) {
        let imageSize = self.imageRectForContentRect(self.frame)
        let titleFont = self.titleLabel?.font!
        let titleSize = title.sizeWithAttributes([NSFontAttributeName: titleFont!])
        
        var titleInsets: UIEdgeInsets
        var imageInsets: UIEdgeInsets
        
        switch (position){
        case .Top:
            titleInsets = UIEdgeInsets(top: -(imageSize.height + titleSize.height + spacing),
                                       left: -(imageSize.width), bottom: 0, right: 0)
            imageInsets = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: -titleSize.width)
        case .Bottom:
            titleInsets = UIEdgeInsets(top: (imageSize.height + titleSize.height + spacing),
                                       left: -(imageSize.width), bottom: 0, right: 0)
            imageInsets = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: -titleSize.width)
        case .Left:
            titleInsets = UIEdgeInsets(top: 0, left: -(imageSize.width * 2), bottom: 0, right: imageSize.width * 2)
            imageInsets = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: -(titleSize.width * 2 + spacing))
        case .Right:
            titleInsets = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: -spacing)
            imageInsets = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
        default:
            titleInsets = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
            imageInsets = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
        }
        
        self.titleEdgeInsets = titleInsets
        self.imageEdgeInsets = imageInsets
    }
}
