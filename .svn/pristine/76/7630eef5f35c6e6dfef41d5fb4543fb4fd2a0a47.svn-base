//
//  CPRealTimeCarController.swift
//  i84cpn
//
//  Created by 爱巴士-余夏伟 on 16/5/31.
//  Copyright © 2016年 5i84. All rights reserved.
//

import UIKit

class CPRealTimeCarController: UIViewController,BMKMapViewDelegate,BMKLocationServiceDelegate,BMKRouteSearchDelegate,CPRealTimeCarTabbarViewProtocol {

    var mapView = BMKMapView()
    var locService = BMKLocationService()
    var hasLocation = Bool()
    
    var tabbarView = CPRealTimeCarTabbarView()
    var userLineData = NSArray()
    var stationList = NSArray()
    var pointList = NSArray()
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.view.backgroundColor = UIColor.whiteColor()
        self.title = "实时专车"
        self.navigationController?.navigationBar.tintColor = UIColor.blackColor()
        
        self.setupMapView()
        self.creatTabbarView()
        self.getLineData()
    }

    override func viewWillAppear(animated: Bool) {
        mapView.delegate = self
        locService.delegate = self
    }
    
    override func viewWillDisappear(animated: Bool) {
        mapView.delegate = nil
        locService.delegate = nil
    }
    
    //MARK: 创建路线选择标签栏
    func creatTabbarView() {
        tabbarView = CPRealTimeCarTabbarView.init(frame: CGRectMake(0, SCREEN_HEIGHT-114, SCREEN_WIDTH, 50))
        tabbarView.delegate = self
        self.view.addSubview(tabbarView)
    }
    
    //MARK: 配置百度地图
    func setupMapView() {
        self.view.addSubview(mapView)
        mapView.showMapScaleBar = true
        mapView.showsUserLocation = true
        weak var weakSelf = self
        mapView .snp_makeConstraints { (make) in
            make.edges.equalTo(weakSelf!.view)
        }
        
        locService.distanceFilter = 1
        locService.headingFilter = 5
        locService.startUserLocationService()
    }
    
    
    //MARK: 获取用户线路信息
    func getLineData() {
        weak var weakSelf = self
        CPRealTimeCarModel .getUserLineData({ (success) in
            weakSelf?.userLineData = (success?.obj)! as NSArray
            weakSelf!.tabbarView.viewData = (success?.obj)! as NSArray
            weakSelf?.tabbarViewDidSelectRowAtIndexPath(0)
        }) { (fail) in
            print(fail)
        }
    }
    
    //MARK: 获取线路详细信息
    func tabbarViewDidSelectRowAtIndexPath(index: Int) {
        weak var weakSelf = self
        let dic = userLineData[index] as! NSDictionary
        LineDetailModel.getLineDetailData(["action":"tm_line_point","LINE_NO":dic["line_no"] as! String,"LINE_TYPE":dic["is_up_down"] as! Int,"BUS_NO":dic["plate_no"] as! String,"classId":dic["classes_id"] as! Int] , successClosure: { (success) in
            
            weakSelf!.pointList = (success.linePointLt)! as NSArray
            weakSelf!.stationList = (success.stationLt)! as NSArray
            self.drawLineOnMap()
            
            }, fail: { (fail) in
                print(fail)
        })
    }
    
    
    
    //MARK: 百度地图代理方法
    func willStartLocatingUser() {
        print("start locate")
    }
    
    func didUpdateUserHeading(userLocation: BMKUserLocation!) {
        mapView.updateLocationData(userLocation)
    }
    
    func didUpdateBMKUserLocation(userLocation: BMKUserLocation!) {
        mapView.updateLocationData(userLocation)
        if hasLocation == false{
            var region = BMKCoordinateRegion()
            region.center = userLocation.location.coordinate
            region.span.latitudeDelta = 0.1
            region.span.longitudeDelta = 0.1
            mapView.setRegion(region, animated: true)
        }
        hasLocation = true
    }
    
    func didStopLocatingUser() {
        print("stop locate")
    }
    
    func didFailToLocateUserWithError(error: NSError!) {
        print("location error")
    }

    
    func drawLineOnMap() {
        
        mapView.removeAnnotations(mapView.annotations)
        mapView.removeOverlays(mapView.overlays)

        if pointList.count != 0 && stationList.count != 0{
            
            let pointCount = pointList.count
            let stationCount = stationList.count
//            var pointCounts = 0
            
             // 添加 annotation 节点
            for i in 0..<stationCount{
                
                if i == 0 {
                    let step : NSDictionary = pointList[0] as! NSDictionary
                    let item = RouteAnnotation()
                    item.coordinate = CLLocationCoordinate2D(latitude: step["LATITUDE"]!.doubleValue, longitude: step["LONGITUDE"]!.doubleValue)
                    item.title = "起点"
                    item.type = 0
                    mapView.addAnnotation(item)  // 添加起点标注
                }else if i == stationCount - 1 {
                    let step : NSDictionary = pointList[pointCount-1] as! NSDictionary
                    let item = RouteAnnotation()
                    item.coordinate = CLLocationCoordinate2D(latitude: step["LATITUDE"]!.doubleValue, longitude: step["LONGITUDE"]!.doubleValue)
                    item.title = "终点"
                    item.type = 1
                    mapView.addAnnotation(item)  // 添加终点标注
                }
                
                let step : NSDictionary = stationList[i] as! NSDictionary
                let item = RouteAnnotation()
                item.coordinate = CLLocationCoordinate2D(latitude: step["latitude"]!.doubleValue, longitude: step["longitude"]!.doubleValue)
                item.title = step["stationName"] as! String
                item.type = 2
                mapView.addAnnotation(item)
                print(step)
                
            }
            
            
            // 轨迹点
            var tempPoints = Array(count: pointCount, repeatedValue: BMKMapPoint(x: 0, y: 0))

            for i in 0..<pointCount {
                let step : NSDictionary = pointList[i] as! NSDictionary
                tempPoints[i].x = step["LATITUDE"]!.doubleValue
                tempPoints[i].y = step["LONGITUDE"]!.doubleValue
            }
        
            // 通过 points 构建 BMKPolyline
            let polyLine = BMKPolyline(points: &tempPoints, count: UInt(pointCount))
            mapViewFitPolyLine(polyLine)
            mapView.addOverlay(polyLine)  // 添加路线 overlay
        }
    }
    
    
    /**
     *根据anntation生成对应的View
     *@param mapView 地图View
     *@param annotation 指定的标注
     *@return 生成的标注View
     */
    func mapView(mapView: BMKMapView!, viewForAnnotation annotation: BMKAnnotation!) -> BMKAnnotationView! {
        if let routeAnnotation = annotation as! RouteAnnotation? {
            return getViewForRouteAnnotation(routeAnnotation)
        }
        return nil
    }
    
    
    /**
     *根据overlay生成对应的View
     *@param mapView 地图View
     *@param overlay 指定的overlay
     *@return 生成的覆盖物View
     */
    func mapView(mapView: BMKMapView!, viewForOverlay overlay: BMKOverlay!) -> BMKOverlayView! {
        if overlay as! BMKPolyline? != nil {
            let polylineView = BMKPolylineView(overlay: overlay as! BMKPolyline)
            polylineView.strokeColor = UIColor(red: 0, green: 0, blue: 1, alpha: 0.7)
            polylineView.lineWidth = 3
            return polylineView
        }
        return nil
    }
    
    
    //根据polyline设置地图范围
    func mapViewFitPolyLine(polyline: BMKPolyline!) {
        if polyline.pointCount < 1 {
            return
        }
        
        let pt = polyline.points[0]
        var ltX = pt.x
        var rbX = pt.x
        var ltY = pt.y
        var rbY = pt.y
        
        for i in 1..<polyline.pointCount {
            let pt = polyline.points[Int(i)]
            if pt.x < ltX {
                ltX = pt.x
            }
            if pt.x > rbX {
                rbX = pt.x
            }
            if pt.y > ltY {
                ltY = pt.y
            }
            if pt.y < rbY {
                rbY = pt.y
            }
        }
        
        let rect = BMKMapRectMake(ltX, ltY, rbX - ltX, abs(rbY - ltY))
        mapView.visibleMapRect = rect
        mapView.zoomLevel = mapView.zoomLevel - 0.3
    }

    
    // MARK: -
    func getViewForRouteAnnotation(routeAnnotation: RouteAnnotation!) -> BMKAnnotationView? {
        var view: BMKAnnotationView?
        
        var imageName: String?
        switch routeAnnotation.type {
        case 0:
            imageName = "nav_start"
        case 1:
            imageName = "nav_end"
        case 2:
            imageName = "nav_bus"
        case 3:
            imageName = "nav_rail"
        case 4:
            imageName = "direction"
        case 5:
            imageName = "nav_waypoint"
        default:
            return nil
        }
        let identifier = "\(imageName)_annotation"
        view = mapView.dequeueReusableAnnotationViewWithIdentifier(identifier)
        if view == nil {
            view = BMKAnnotationView(annotation: routeAnnotation, reuseIdentifier: identifier)
            view?.centerOffset = CGPointMake(0, -(view!.frame.size.height * 0.5))
            view?.canShowCallout = true
        }
        
        view?.annotation = routeAnnotation
        
        let bundlePath = NSBundle.mainBundle().resourcePath?.stringByAppendingString("/mapapi.bundle/")
        let bundle = NSBundle(path: bundlePath!)
        if let imagePath = bundle?.resourcePath?.stringByAppendingString("/images/icon_\(imageName!).png") {
            var image = UIImage(contentsOfFile: imagePath)
            if routeAnnotation.type == 4 {
                image = imageRotated(image, degrees: routeAnnotation.degree)
            }
            if image != nil {
                view?.image = image
            }
        }
        
        return view
    }
    
    
    //旋转图片
    func imageRotated(image: UIImage!, degrees: Int!) -> UIImage {
        let width = CGImageGetWidth(image.CGImage)
        let height = CGImageGetHeight(image.CGImage)
        let rotatedSize = CGSize(width: width, height: height)
        UIGraphicsBeginImageContext(rotatedSize);
        let bitmap = UIGraphicsGetCurrentContext();
        CGContextTranslateCTM(bitmap, rotatedSize.width/2, rotatedSize.height/2);
        CGContextRotateCTM(bitmap, CGFloat(Double(degrees) * M_PI / 180.0));
        CGContextRotateCTM(bitmap, CGFloat(M_PI));
        CGContextScaleCTM(bitmap, -1.0, 1.0);
        CGContextDrawImage(bitmap, CGRectMake(-rotatedSize.width/2, -rotatedSize.height/2, rotatedSize.width, rotatedSize.height), image.CGImage);
        let newImage = UIGraphicsGetImageFromCurrentImageContext();
        UIGraphicsEndImageContext();
        return newImage;
    }

    
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        print("内存警告!!")
    }

}


