//
//  CPUserCenterHomePageViewController.swift
//  i84cpn
//
//  Created by BenjaminRichard on 16/5/9.
//  Copyright © 2016年 5i84. All rights reserved.
//

import UIKit

class CPUserCenterHomePageViewController: UIViewController, UITableViewDelegate, UITableViewDataSource {

    override func viewDidLoad() {
        super.viewDidLoad()

//        view = userCenterHomePageView
        view.addSubview(userCenterHomePageView)
        self.automaticallyAdjustsScrollViewInsets = false
        
        self.navigationController?.navigationBar.tintColor = UIColor.blackColor()
        
        navigationItem.leftBarButtonItem=UIBarButtonItem.item(self, action: #selector(MessageReminding), image: "icon_msg", highImage: "icon_msg")
        navigationItem.rightBarButtonItem=UIBarButtonItem.item(self, action: #selector(MessageReminding), image: "icon_ring", highImage: "icon_ring")
    }
    
    override func viewWillAppear(animated: Bool) {
        super.viewWillAppear(animated)
        if !CPUserModel.getLoginState() {
            login()
        }
        self.navigationController!.navigationBar.barTintColor = Constants.mainColor
        userCenterHomePageView.frame = view.frame
    }
    
    override func viewDidAppear(animated: Bool) {
        super.viewDidAppear(animated)
        userCenterHomePageView.tableView.delegate = self
        userCenterHomePageView.tableView.dataSource = self
        userCenterHomePageView.tableView.reloadData()
        
        userCenterHomePageView.headViewBGButton.addTarget(self, action: #selector(personInfo), forControlEvents: .TouchUpInside)
        userCenterHomePageView.personInfomationButton.addTarget(self, action: #selector(personInfo), forControlEvents: .TouchUpInside)
        userCenterHomePageView.quitButton.addTarget(self, action: #selector(quit), forControlEvents: .TouchUpInside)
        
        notLoginView.yesButton.addTarget(self, action: #selector(gotoLogin), forControlEvents: .TouchUpInside)
        
        userCenterHomePageView.reloadData()
        userCenterHomePageView.quitButton.hidden = false
    }
    
    
    func MessageReminding() {
        let vc = CPMessageRemindingViewController()
        vc.hideNavi = true
        self.navigationController!.navigationBar.barTintColor = Constants.whiteBGColor
        self.navigationController?.pushViewController(vc, animated: true)
    }
    
    func login() {
        let userName = NSUserDefaults.standardUserDefaults().valueForKey("UserNameKey") as! String!
        let pwd = NSUserDefaults.standardUserDefaults().valueForKey("PwdKey") as! String!
        if  pwd != nil && pwd.characters.count != 0 {
            let param = ["username": userName,"password":pwd, "manage":"member", "isApp":"1"];
            
            let hub = MBProgressHUD.showHUDAddedTo(self.view, animated: true)
            CPAFHTTPSessionManager.postWithUrlString(Constants.loginURL , parameter: param, progressBlock: { (progress) in
                
                }, successBlock: { (respondData) in
                    let dic:NSDictionary = respondData as! NSDictionary
                    let success: Bool = dic["success"] as! Bool
                    if success == true {
                        CPUserModel.login()
                        self.getUserInfo()
                    } else {
                        print("login error")
                    }
                    hub.hide(true)
                }, failureBlock: { (error) in
                    print(error)
                    hub.hide(true)
            })

        }
    }
    func getUserInfo() {
        CPAFHTTPSessionManager.postWithUrlString(Constants.userInfoURL, parameter: Constants.getUserInfoParam, progressBlock: { (progress) in
            
            }, successBlock: { (respondData) in
                let dic:NSDictionary = respondData as! NSDictionary
                let rsp: Bool = dic["success"] as! Bool
                if rsp {
                    let objData: NSDictionary = dic["result"] as! NSDictionary
                    let imageName = objData.valueForKey("userPicture")
                    let petName = objData.valueForKey("nickName")
                    let realName = objData.valueForKey("realName")
                    let idNo = objData.valueForKey("idNo")
                    let mobile = objData.valueForKey("mobile")
                    
                    if (imageName != nil) {
                        CPUserModel.imageName = imageName as? String
                    }
                    if (petName != nil) {
                        CPUserModel.petName = petName as? String
                    }
                    if (realName != nil) {
                        CPUserModel.realName = realName as? String
                    }
                    if (idNo != nil) {
                        CPUserModel.idNo = idNo as? String
                    }
                    if (mobile != nil) {
                        CPUserModel.encryptedPhoneNum = mobile as? String
                    }
                    self.getVersion()
                    
                }
        }) { (error) in
            print(error)
        }
    }

    func getVersion() {
//        CPAFHTTPSessionManager.postWithUrlString(Constants.noauthApiURL, parameter: Constants.getVersion(), progressBlock: nil, successBlock: { (respondData) in
//            let dic:NSDictionary = respondData as! NSDictionary
//            let rsp: Bool = dic["success"] as! Bool
//            if rsp {
//                var objData: NSDictionary = dic["result"] as! NSDictionary
//                if objData.objectForKey("success") as! Bool {
//                    objData = objData.objectForKey("result") as! NSDictionary
//                    let version = objData.objectForKey("version")
//                    let code = objData.objectForKey("code")
//                    Constants.dPrint(version)
//                    Constants.dPrint(code)
//                }
//                self.userCenterHomePageView.reloadData()
//            }
//            }) { (error) in
//                Constants.dPrint(error)
//        }
//        let urlStr = "abc"
//        let url = NSURL.init(string: urlStr)
//        UIApplication.sharedApplication().openURL(url!)
    }
        
    // 事件响应

    
    func quit(button: UIButton) {
        if CPUserModel.getLoginState() {
            CPAFHTTPSessionManager.getJsonWithUrlString(Constants.userLogoutURL, parameter: nil, progressBlock: { (progress) in
                
                }, successBlock: { (respondData) in
                    
                    let dic:NSDictionary = respondData as! NSDictionary
                    let success: Bool = dic["success"] as! Bool
                    if success == true {
                        let alertView = UIAlertView(title: "提示", message: "退出成功", delegate: self, cancelButtonTitle: "确定")
                        alertView.show()
                        CPUserModel.clearData()
                        NSUserDefaults.standardUserDefaults().setObject("", forKey: "UserNameKey")
                        NSUserDefaults.standardUserDefaults().setObject("", forKey: "PwdKey")
                        
                        //设置同步
                        NSUserDefaults.standardUserDefaults().synchronize()
                        self.userCenterHomePageView.reloadData()
                    }
            }) { (error) in
                print(error)
            }
        }
        
    }
    
    func personInfo(button: UIButton) {
        if !CPUserModel.getLoginState() {
            gotoLoginAlertView()
        } else {
            let vc = CPUserInfoViewController()
            self.hidesBottomBarWhenPushed=true
            self.navigationController!.navigationBar.barTintColor = Constants.whiteBGColor
            self.navigationController?.pushViewController(vc, animated: true)
            self.hidesBottomBarWhenPushed=false
        }
    }
    
    func gotoLoginAlertView() {
        view.addSubview(notLoginView)
        notLoginView.frame = view.frame
    }
    
    func gotoLogin() {
        notLoginView.removeFromSuperview()
        let vc = CPLoginViewController()
        vc.hideNavi = true
        self.hidesBottomBarWhenPushed=true
        self.navigationController?.pushViewController(vc, animated: true)
        self.hidesBottomBarWhenPushed=false
    }
    
    //MARK:--  datasource
    func numberOfSectionsInTableView(tableView: UITableView) -> Int {
        return 4
    }
    
    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        switch section {
        case 0:
            return titleArray1.count
        case 1:
            return titleArray2.count
        case 2:
            return titleArray3.count
        case 3:
            return titleArray4.count
        default:
            return 0
        }
    }
    
    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
        let cell: UITableViewCell
        if indexPath.section == 0 && indexPath.row == 0 { // 巴币
            let cell = CPCoinCell()
            cell.titileLabel.text = titleArray1[indexPath.row]
//            cell.coinLabel.text = "1000"
            return cell
        } else if indexPath.section == 2 && indexPath.row != 0 {
            if indexPath.row == 1 { // 客服热线
                cell = UITableViewCell(style: UITableViewCellStyle.Value1, reuseIdentifier: "ab")
                cell.detailTextLabel?.text = "服务时间6:00-21:00"
                cell.detailTextLabel?.font = UIFont.systemFontOfSize(UIFont.smallSystemFontSize())
            }
            else { // 版本
                let cell = CPVersionCell()
                cell.titleLabel.text = titleArray3[indexPath.row]
                cell.detailLabel.text = version
                return cell
            }
        } else if indexPath.section == 1  {
            let cell = CPCityCell()
            if NSUserDefaults.standardUserDefaults().valueForKey("defaultCityName") != nil {
                cell.cityLabel.text = NSUserDefaults.standardUserDefaults().valueForKey("defaultCityName") as? String
            }
            return cell
        } else {
            cell = UITableViewCell()
            cell.accessoryType = UITableViewCellAccessoryType.DisclosureIndicator
        }
        switch indexPath.section {
        case 0:
            cell.textLabel?.text = titleArray1[indexPath.row]
        case 1:
            cell.textLabel?.text = titleArray2[indexPath.row]
        case 2:
            cell.textLabel?.text = titleArray3[indexPath.row]
        case 3:
            cell.textLabel?.text = titleArray4[indexPath.row]
        default:
            cell.textLabel?.text = ""
        }
        return cell
    }
    
    func getViewWithIndex(indexPath: NSIndexPath) -> UIViewController {
        var vc: UIViewController?
        self.navigationController!.navigationBar.barTintColor = Constants.whiteBGColor
        if indexPath.section == 0 {
            if indexPath.row == 0 {
                vc = CPMyCoinViewController()
            } else if indexPath.row == 1 {
                vc  = CPMyOrdersViewController()
                (vc as! CPMyOrdersViewController).hideNavi = true
            } else if indexPath.row == 2 {
                vc = CPMyCoinViewController()
            } else if indexPath.row == 3 {
                vc = CPPassengerInfoViewController()
            }
        } else if indexPath.section == 1 {
//            if indexPath.row == 0 {
//                vc = CPMyCoinViewController()
//            } else if indexPath.row == 1 {
//                vc = CPCitySwitchViewController()
//            }
            vc = CPCitySwitchViewController()
        } else if indexPath.section == 2 {
            if indexPath.row == 0 {
                vc = CPAbout5i84ViewController()
            }
        } else if indexPath.section == 3 {
            if indexPath.row == 0 {
                vc = CPSuggestionsViewController()
            } else if indexPath.row == 1 {
                vc = CPFAQsViewController()
            }
        }
        return vc!
    }
    
    // MARK:-- delegate
    func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
        if indexPath.section == 2 && indexPath.row != 0 {
            if indexPath.row == 1 {
                let phoneCallUrl = NSURL(string: "tel://4008885284")
                UIApplication.sharedApplication().openURL(phoneCallUrl!)
            } else {
                
            }
        } else if indexPath.section == 0 && indexPath.row == 2 {
            let alertView = UIAlertView(title: "提示", message: "敬请期待", delegate: self, cancelButtonTitle: "确定")
            alertView.show()
        } else {
            if !CPUserModel.getLoginState() && indexPath.section != 1 && indexPath.section != 2 {
                gotoLoginAlertView()
            } else {
                let vc = getViewWithIndex(indexPath)
                
                self.hidesBottomBarWhenPushed=true
                self.navigationController?.pushViewController(vc, animated: true)
                self.hidesBottomBarWhenPushed=false
            }
        }
    }
    
    func tableView(tableView: UITableView, estimatedHeightForRowAtIndexPath indexPath: NSIndexPath) -> CGFloat {
        return 10
    }
    
    func tableView(tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        return 1
    }
    
    func tableView(tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 15
    }
    
    //MARK: -- 属性
    private var version = "1.0.0"
    
    let userCenterHomePageView: CPUserCenterHomePageView = CPUserCenterHomePageView()
    private let notLoginView = CPNotLoginView()
//    let titleArray: Array = ["我的巴币", "我的订单", "我的线路", "乘客信息" ,"首页菜单设置", "城市切换", "关于我们", "点击拨打热线客服电话", "当前版本", "意见反馈", "常见问题及解答"];
    private let titleArray1: Array = ["我的巴币", "我的订单", "我的征集", "乘客信息"];
//    private let titleArray2: Array = ["首页菜单设置", "城市切换"];
    private let titleArray2: Array = ["城市切换"];
    private let titleArray3: Array = ["关于我们", "点击拨打客服热线", "当前版本"];
//    let titleArray3: Array = ["关于我们", "点击拨打热线客服电话"];
    private let titleArray4: Array = ["意见反馈", "常见问题及解答"];
}
