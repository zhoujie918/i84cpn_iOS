//
//  AppDelegate.m
//  clife
//
//  Created by BenjaminRichard on 16/5/5.
//  Copyright © 2016年 5i84. All rights reserved.
//

#import "AppDelegate.h"
#import "i84cpn-Swift.h"
#import <AlipaySDK/AlipaySDK.h>
#import <AdSupport/AdSupport.h>
#import "JPUSHService.h"
#import "CPPayResultController.h"
#import "CPPayFailResultController.h"

@class CPUserModel;

@interface AppDelegate (){
    CPTabBarController *tabbar;
    Boolean iconPush;
    NSInteger msgType;
}

@end


@implementation AppDelegate


- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    self.window =[[UIWindow alloc]initWithFrame :[UIScreen mainScreen].bounds ];
    [[UIBarButtonItem appearance] setBackButtonTitlePositionAdjustment:UIOffsetMake(0, -60) forBarMetrics:UIBarMetricsDefault];
    __mapManager = [[BMKMapManager alloc]init];
    // 如果要关注网络及授权验证事件，请设定     generalDelegate参数
    BOOL ret = [__mapManager start:@"GhRANjLmetIp9KxHRV5VHLAlVEEzgFls"  generalDelegate:nil];
    if (!ret) {
        NSLog(@"BMKmanager start failed!");
    }else{
        //            NSLog(@"授权成功!");
    }
    
    [self. window makeKeyAndVisible ];
    
    // 得到当前应用的版本号
    NSDictionary *infoDictionary = [[NSBundle mainBundle] infoDictionary];// NSBundle.mainBundle().infoDictionary;
    NSString *currentAppVersion = infoDictionary[@"CFBundleShortVersionString"];
    NSString *buildVersion = infoDictionary[@"CFBundleVersion"];
    // 取出之前保存的版本号
    NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];
    NSString *appVersion = [userDefaults stringForKey:@"appVersion"];
    NSLog(@"appVersion:%@ currentAppVersion:%@ buildVersion: %@", appVersion, currentAppVersion, buildVersion);
    
    if([userDefaults valueForKey:@"cityId"] == nil) {
        [userDefaults setObject:@350100 forKey:@"cityId"];
        [userDefaults synchronize];
    }
    // 如果 appVersion 为 nil 说明是第一次启动；如果 appVersion 不等于 currentAppVersion 说明是更新了
    if (appVersion == nil || ![appVersion isEqualToString: currentAppVersion]) {
        // 保存最新的版本号
        [userDefaults setValue:currentAppVersion forKey:@"appVersion"];
        
        CPWelComePageViewController *vc = [[CPWelComePageViewController alloc]init];
        UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:vc];
        self.window.rootViewController =nav;
    } else {
        tabbar = [CPTabBarController shareInstance];
        self.window.rootViewController =tabbar;
    }
    
    // 极光推送
    NSString *advertisingId = [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];
    
//    if ([[UIDevice currentDevice].systemVersion floatValue] >= 8.0) {
        //可以添加自定义categories
        [JPUSHService registerForRemoteNotificationTypes:(UIUserNotificationTypeBadge |
                                                          UIUserNotificationTypeSound |
                                                          UIUserNotificationTypeAlert)
                                              categories:nil];
//    }
//    else {
//        //categories 必须为nil
//        [JPUSHService registerForRemoteNotificationTypes:(UIRemoteNotificationTypeBadge |
//                                                          UIRemoteNotificationTypeSound |
//                                                          UIRemoteNotificationTypeAlert)
//                                              categories:nil];
//    }
    
    //如不需要使用IDFA，advertisingIdentifier 可为nil
    [JPUSHService setupWithOption:launchOptions appKey:appKey
                          channel:channel
                 apsForProduction:isProduction
            advertisingIdentifier:advertisingId];
//    [CPUserModel getUserInfo];
//    CPUserCenterHomePageViewController *vc = [[CPUserCenterHomePageViewController alloc] init];
//    UINavigationController *nav=[[ UINavigationController alloc]initWithRootViewController :vc];
//    self. window.rootViewController =nav;
    return YES;
}


//禁止横屏
- (UIInterfaceOrientationMask)application:(UIApplication *)application supportedInterfaceOrientationsForWindow:(UIWindow *)window {
    return UIInterfaceOrientationMaskPortrait;
}

#pragma mark 支付宝APP支付回调

-(BOOL)application:(UIApplication *)application
           openURL:(NSURL *)url
 sourceApplication:(NSString *)sourceApplication
        annotation:(id)annotation {
    
    if ([url.host isEqualToString:@"safepay"]) {
        //跳转支付宝钱包进行支付，处理支付结果
        [[AlipaySDK defaultService] processOrderWithPaymentResult:url standbyCallback:^(NSDictionary *resultDic) {
            [self judgeAlipayCallBackResult:resultDic];
        }];
    }
    return YES;
}

//NOTE: 9.0以后使用新API接口
-(BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary<NSString*, id> *)options{
    if ([url.host isEqualToString:@"safepay"]) {
        //跳转支付宝钱包进行支付，处理支付结果
        [[AlipaySDK defaultService] processOrderWithPaymentResult:url standbyCallback:^(NSDictionary *resultDic) {
            [self judgeAlipayCallBackResult:resultDic];
        }];
    }
    return YES;
}


-(void)judgeAlipayCallBackResult:(NSDictionary *)resultDic{
    NSLog(@"支付宝APP支付结果 : %@",resultDic);
    
    CPTabBarController *tab = [CPTabBarController shareInstance];
    UINavigationController *Navi = tab.selectedViewController;
    NSLog(@"navi : %@",Navi);
    BOOL canPush = YES;
    for (UIViewController *VC in Navi.viewControllers) {
        if ([VC isKindOfClass:[CPPayFailResultController class]]) {
            canPush = NO;   //若失败页面存在，则不用再跳转
        }
    }
    
    if ([resultDic[@"resultStatus"] intValue] == 4000) {
        
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"提示" message:@"订单支付失败" delegate:nil cancelButtonTitle:@"知道了" otherButtonTitles: nil];
        [alert show];
        
        //跳转失败页面
        if (canPush) {
            CPPayFailResultController *failVC = [[CPPayFailResultController alloc] init];
            [Navi pushViewController:failVC animated:YES];
        }
        
    } else if ([resultDic[@"resultStatus"] intValue] == 6001) {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"提示" message:@"取消支付" delegate:nil cancelButtonTitle:@"知道了" otherButtonTitles: nil];
        [alert show];
        
    } else if ([resultDic[@"resultStatus"] intValue] == 6002) {
        
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"提示" message:@"网络连接失败，请检查网络" delegate:nil cancelButtonTitle:@"知道了" otherButtonTitles:nil];
        [alert show];
        
    }else if ([resultDic[@"resultStatus"] intValue]==9000) {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"提示" message:@"支付宝支付成功" delegate:self cancelButtonTitle:@"确定" otherButtonTitles: nil];
        alert.tag = 100;
        [alert show];

        //跳转成功页面
        CPPayResultController *successVC = [[CPPayResultController alloc] init];
        [Navi pushViewController:successVC animated:YES];
    }else{
        
        NSString *resultMes = resultDic[@"memo"];
        resultMes = (resultMes.length<=0?@"支付失败,未知原因":resultMes);
        NSLog(@"%@",resultMes);
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"提示" message:@"订单支付失败" delegate:nil cancelButtonTitle:@"知道了" otherButtonTitles: nil];
        [alert show];
        
        //跳转失败页面
        if (canPush) {
            CPPayFailResultController *failVC = [[CPPayFailResultController alloc] init];
            [Navi pushViewController:failVC animated:YES];
        }
    }
}


- (void)applicationWillResignActive:(UIApplication *)application {
//        [APService stopLogPageView:@"aa"];
    // Sent when the application is about to move from active to inactive state.
    // This can occur for certain types of temporary interruptions (such as an
    // incoming phone call or SMS message) or when the user quits the application
    // and it begins the transition to the background state.
    // Use this method to pause ongoing tasks, disable timers, and throttle down
    // OpenGL ES frame rates. Games should use this method to pause the game.
}

- (void)applicationDidEnterBackground:(UIApplication *)application {
    // Use this method to release shared resources, save user data, invalidate
    // timers, and store enough application state information to restore your
    // application to its current state in case it is terminated later.
    // If your application supports background execution, this method is called
    // instead of applicationWillTerminate: when the user quits.
    
    //[[UIApplication sharedApplication] setApplicationIconBadgeNumber:1];
    
    [[UIApplication sharedApplication] setApplicationIconBadgeNumber:0];
}

- (void)applicationWillEnterForeground:(UIApplication *)application {
    if ([application applicationIconBadgeNumber] != 0) {
        iconPush = true;
        msgType = 0;
        [application setApplicationIconBadgeNumber:0];
        [self pushMessageRemindingView];
        [JPUSHService resetBadge];
    }
    [application cancelAllLocalNotifications];
}

- (void) pushMessageRemindingView {
    
    CPMessageRemindingViewController *vc = [[CPMessageRemindingViewController alloc] init];
    if (iconPush == true) {
        CPTabBarController *tab = [CPTabBarController shareInstance];
        UINavigationController *Navi = tab.selectedViewController;
        [Navi popViewControllerAnimated:false];
        [Navi pushViewController:vc animated:false];
    } else {
        CPTabBarController *tab = [CPTabBarController shareInstance];
        UINavigationController *Navi = tab.selectedViewController;
        [Navi popViewControllerAnimated:false];
        [Navi pushViewController:vc animated:false];
        [vc setIndx:msgType type:true];
    }
}

- (void)applicationDidBecomeActive:(UIApplication *)application {
    // Restart any tasks that were paused (or not yet started) while the
    // application was inactive. If the application was previously in the
    // background, optionally refresh the user interface.
}

- (void)applicationWillTerminate:(UIApplication *)application {
    // Called when the application is about to terminate. Save data if
    // appropriate. See also applicationDidEnterBackground:.
}

- (void)application:(UIApplication *)application
didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {
//    rootViewController.deviceTokenValueLabel.text =
//    [NSString stringWithFormat:@"%@", deviceToken];
//    rootViewController.deviceTokenValueLabel.textColor =
//    [UIColor colorWithRed:0.0 / 255
//                    green:122.0 / 255
//                     blue:255.0 / 255
//                    alpha:1];
    NSLog(@"%@", [NSString stringWithFormat:@"Device Token: %@", deviceToken]);
    [JPUSHService registerDeviceToken:deviceToken];
    
//    [JPUSHService setTags:[NSSet set] aliasInbackground:@"417eac30"];
}

- (void)application:(UIApplication *)application
didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {
    NSLog(@"did Fail To Register For Remote Notifications With Error: %@", error);
}

#if __IPHONE_OS_VERSION_MAX_ALLOWED > __IPHONE_7_1
- (void)application:(UIApplication *)application
didRegisterUserNotificationSettings:
(UIUserNotificationSettings *)notificationSettings {
}

// Called when your app has been activated by the user selecting an action from
// a local notification.
// A nil action identifier indicates the default action.
// You should call the completion handler as soon as you've finished handling
// the action.
- (void)application:(UIApplication *)application
handleActionWithIdentifier:(NSString *)identifier
forLocalNotification:(UILocalNotification *)notification
  completionHandler:(void (^)())completionHandler {
}

// Called when your app has been activated by the user selecting an action from
// a remote notification.
// A nil action identifier indicates the default action.
// You should call the completion handler as soon as you've finished handling
// the action.
- (void)application:(UIApplication *)application
handleActionWithIdentifier:(NSString *)identifier
forRemoteNotification:(NSDictionary *)userInfo
  completionHandler:(void (^)())completionHandler {
}
#endif


- (void)application:(UIApplication *)application
didReceiveRemoteNotification:(NSDictionary *)userInfo
fetchCompletionHandler:
(void (^)(UIBackgroundFetchResult))completionHandler {
    [JPUSHService handleRemoteNotification:userInfo];
    if([UIApplication sharedApplication].applicationState == UIApplicationStateInactive) {
        msgType = [NSString stringWithFormat:@"%@", userInfo[@"msgType"]].intValue;
         [application setApplicationIconBadgeNumber:0];
        iconPush = false;
         [self pushMessageRemindingView];
    }

    completionHandler(UIBackgroundFetchResultNewData);
}

- (void)application:(UIApplication *)application
didReceiveLocalNotification:(UILocalNotification *)notification {
    [JPUSHService showLocalNotificationAtFront:notification identifierKey:nil];
}

// log NSSet with UTF8
// if not ,log will be \Uxxx
- (NSString *)logDic:(NSDictionary *)dic {
    if (![dic count]) {
        return nil;
    }
    NSString *tempStr1 =
    [[dic description] stringByReplacingOccurrencesOfString:@"\\u"
                                                 withString:@"\\U"];
    NSString *tempStr2 =
    [tempStr1 stringByReplacingOccurrencesOfString:@"\"" withString:@"\\\""];
    NSString *tempStr3 =
    [[@"\"" stringByAppendingString:tempStr2] stringByAppendingString:@"\""];
    NSData *tempData = [tempStr3 dataUsingEncoding:NSUTF8StringEncoding];
    NSString *str =
    [NSPropertyListSerialization propertyListFromData:tempData
                                     mutabilityOption:NSPropertyListImmutable
                                               format:NULL
                                     errorDescription:NULL];
    return str;
}

@end
